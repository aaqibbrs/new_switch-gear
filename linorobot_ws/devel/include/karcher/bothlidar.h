// Generated by gencpp from file karcher/bothlidar.msg
// DO NOT EDIT!


#ifndef KARCHER_MESSAGE_BOTHLIDAR_H
#define KARCHER_MESSAGE_BOTHLIDAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace karcher
{
template <class ContainerAllocator>
struct bothlidar_
{
  typedef bothlidar_<ContainerAllocator> Type;

  bothlidar_()
    : above()
    , slant()  {
    }
  bothlidar_(const ContainerAllocator& _alloc)
    : above(_alloc)
    , slant(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _above_type;
  _above_type above;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _slant_type;
  _slant_type slant;





  typedef boost::shared_ptr< ::karcher::bothlidar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::karcher::bothlidar_<ContainerAllocator> const> ConstPtr;

}; // struct bothlidar_

typedef ::karcher::bothlidar_<std::allocator<void> > bothlidar;

typedef boost::shared_ptr< ::karcher::bothlidar > bothlidarPtr;
typedef boost::shared_ptr< ::karcher::bothlidar const> bothlidarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::karcher::bothlidar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::karcher::bothlidar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::karcher::bothlidar_<ContainerAllocator1> & lhs, const ::karcher::bothlidar_<ContainerAllocator2> & rhs)
{
  return lhs.above == rhs.above &&
    lhs.slant == rhs.slant;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::karcher::bothlidar_<ContainerAllocator1> & lhs, const ::karcher::bothlidar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace karcher

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::karcher::bothlidar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::karcher::bothlidar_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::karcher::bothlidar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::karcher::bothlidar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::karcher::bothlidar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::karcher::bothlidar_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::karcher::bothlidar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32fad128505ad63538e8c4cc9e9a6dbc";
  }

  static const char* value(const ::karcher::bothlidar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32fad128505ad635ULL;
  static const uint64_t static_value2 = 0x38e8c4cc9e9a6dbcULL;
};

template<class ContainerAllocator>
struct DataType< ::karcher::bothlidar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "karcher/bothlidar";
  }

  static const char* value(const ::karcher::bothlidar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::karcher::bothlidar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] above\n"
"float32[] slant\n"
;
  }

  static const char* value(const ::karcher::bothlidar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::karcher::bothlidar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.above);
      stream.next(m.slant);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bothlidar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::karcher::bothlidar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::karcher::bothlidar_<ContainerAllocator>& v)
  {
    s << indent << "above[]" << std::endl;
    for (size_t i = 0; i < v.above.size(); ++i)
    {
      s << indent << "  above[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.above[i]);
    }
    s << indent << "slant[]" << std::endl;
    for (size_t i = 0; i < v.slant.size(); ++i)
    {
      s << indent << "  slant[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.slant[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARCHER_MESSAGE_BOTHLIDAR_H
